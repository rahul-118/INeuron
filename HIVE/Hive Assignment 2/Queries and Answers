Scenario Based questions:

1.Will the reducer work or not if you use “Limit 1” in any HiveQL query?
Ans: Yes the reducer will work because Limit will only decide on the number of rows to be returned for query. 

2.Suppose I have installed Apache Hive on top of my Hadoop cluster using default metastore configuration. Then, what will happen if we have multiple clients trying to access Hive at the same time? 
Ans: By default only one client can access the metastore configuration. Hence if multiple clients try to access they will face an error. In order for multiple users to access the metastore should be a standalone or local metastore.

3.Suppose, I create a table that contains details of all the transactions done by the customers: CREATE TABLE transaction_details (cust_id INT, amount FLOAT, month STRING, country STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’ ;
Now, after inserting 50,000 records in this table, I want to know the total revenue generated for each month. But, Hive is taking too much time in processing this query. How will you solve this problem and list the steps that I will be taking in order to do so?
Ans:We can solve this problem of query latency by partitioning the table according to each month. 
So, for each month we will be scanning only the partitioned data instead of whole data sets.

following steps will solve the very problem:
a.Create a partitioned table, say partitioned_transaction:
CREATE TABLE partitioned_transaction (cust_id INT, amount FLOAT, country STRING) PARTITIONED BY (month STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’ ; 

b. Enable dynamic partitioning in Hive:
SET hive.exec.dynamic.partition = true;
SET hive.exec.dynamic.partition.mode = nonstrict;

c. Transfer the data from the non – partitioned table into the newly created partitioned table:
INSERT OVERWRITE TABLE partitioned_transaction PARTITION (month) SELECT cust_id, amount, country, month FROM transaction_details;
Now, we can perform the query using each partition and therefore, decrease the query time

3.How can you add a new partition for the month December in the above partitioned table?
Ans:ALTER TABLE transaction_details ADD PARTITION (month=’Dec’);
the above query will alter the table and add the new partition.

4.I am inserting data into a table based on partitions dynamically. But, I received an error – FAILED ERROR IN SEMANTIC ANALYSIS: Dynamic partition strict mode requires at least one static partition column. How will you remove this error?
Ans: In order to fix this error we need to activate dynamic partioning for which we can use below commands
set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nostrick;

These will turn on dynamic partition option and the error will not be seen.


5.Suppose, I have a CSV file – ‘sample.csv’ present in ‘/temp’ directory with the following entries:
id first_name last_name email gender ip_address
How will you consume this CSV file into the Hive warehouse using built-in SerDe?
Ans: First of all we need to create a table using Serde.Hive provides a specific SerDe for working with CSV files.
CREATE EXTERNAL TABLE sample
(
id int, 
first_name string, 
last_name string, 
email string,
gender string, 
ip_address string
) 
ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.OpenCSVSerde’ 
STORED AS TEXTFILE LOCATION ‘/temp’;

Now, we can perform any query on the table ‘sample’:

6.Suppose, I have a lot of small CSV files present in the input directory in HDFS and I want to create a single Hive table corresponding to these files. The data in these files are in the format: {id, name, e-mail, country}. Now, as we know, Hadoop performance degrades when we use lots of small files.
So, how will you solve this problem where we want to create a single Hive table for lots of small files without degrading the performance of the system?
Ans: 
One can use the SequenceFile format which will group these small files together to form a single sequence file. 
The steps that will be followed in doing so are as follows:

* Create a temporary table:
CREATE TABLE temp_table 
(
id INT, 
name STRING, 
e-mail STRING, 
country STRING
)
ROW FORMAT FIELDS DELIMITED TERMINATED BY ‘,’ 
STORED AS TEXTFILE;

*Load the data into temp_table:
LOAD DATA INPATH ‘/input’ INTO TABLE temp_table;

*Create a table that will store data in SequenceFile format:
CREATE TABLE sample_seqfile 
(
id INT, 
name STRING, 
e-mail STRING, 
country STRING
)
ROW FORMAT FIELDS DELIMITED TERMINATED BY ‘,’
STORED AS SEQUENCEFILE;

*Transfer the data from the temporary table into the sample_seqfile table:
INSERT OVERWRITE TABLE sample SELECT * FROM temp_table;

a single SequenceFile is generated which contains the data present in all of the input files


7.LOAD DATA LOCAL INPATH ‘Home/country/state/’
OVERWRITE INTO TABLE address;
The following statement failed to execute. What can be the cause?
Ans:

8.Is it possible to add 100 nodes when we already have 100 nodes in Hive? If yes, how?
Ans: 



Hive Practical questions:

1.Hive Join operations

Create a  table named CUSTOMERS(ID | NAME | AGE | ADDRESS   | SALARY)
Create a Second  table ORDER(OID | DATE | CUSTOMER_ID | AMOUNT
)

Now perform different joins operations on top of these tables
(Inner JOIN, LEFT OUTER JOIN ,RIGHT OUTER JOIN ,FULL OUTER JOIN)
Ans:
CREATE TABLE CUSTOMERS
(
  ID int,
  NAME string,
  AGE int,
  ADDRESS string,
  SALARY int
)
ROW FORMAT DELIMITED
FIELDS SEPERATED BY ','
STORED AS TEXTFILE;

CREATE TABLE ORDER
(
  OID int,
  DATE timestamp,
  CUSTOMER ID int,
  AMOUNT int
)
ROW FORMAT DELIMITED
FIELDS SEPERATED BY ','
STORED AS TEXTFILE;


INNER JOIN:
SELECT c.ID, c.NAME, c.AGE, o.AMOUNT
FROM CUSTOMERS c INNER JOIN ORDERS o
ON c.ID = o.CUSTOMER_ID;

LEFT OUTER JOIN:
SELECT c.ID, c.NAME, c.AGE, o.AMOUNT
FROM CUSTOMERS c LEFT OUTER JOIN ORDERS o
ON c.ID = o.CUSTOMER_ID;

RIGHT OUTER JOIN:
SELECT c.ID, c.NAME, c.AGE, o.AMOUNT
FROM CUSTOMERS c RIGHT OUTER JOIN ORDERS o
ON c.ID = o.CUSTOMER_ID;

FULL OUTER JOIN:
SELECT c.ID, c.NAME, c.AGE, o.AMOUNT
FROM CUSTOMERS c FULL OUTER JOIN ORDERS o
ON c.ID = o.CUSTOMER_ID;

2.BUILD A DATA PIPELINE WITH HIVE

Download a data from the given location - 
https://archive.ics.uci.edu/ml/machine-learning-databases/00360/

1. Create a hive table as per given schema in your dataset 
2. try to place a data into table location
3. Perform a select operation . 
4. Fetch the result of the select operation in your local as a csv file . 
5. Perform group by operation . 
7. Perform filter operation at least 5 kinds of filter examples . 
8. show and example of regex operation
9. alter table operation 
10 . drop table operation
12 . order by operation . 
13 . where clause operations you have to perform . 
14 . sorting operation you have to perform . 
15 . distinct operation you have to perform . 
16 . like an operation you have to perform . 
17 . union operation you have to perform . 
18 . table view operation you have to perform . 
