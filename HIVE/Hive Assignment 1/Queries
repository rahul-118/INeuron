1. Download vechile sales data -> https://github.com/shashank-mishra219/Hive-Class/blob/main/sales_order_data.csv

2. Store raw data into hdfs location
  
  created table sales_order_data.csv into hdfs and move into a folder. created HDFS folder rahul.
  
3. Create a internal hive table "sales_order_csv" which will store csv data sales_order_csv .. make sure to skip header row while creating table

  created a database named rahul.

  create database rahul;

  use rahul;

  CREATE TABLE sales_order_csv 
  ( 
    ORDERNUMBER int, 
    QUANTITYORDERED int, 
    PRICEEACH float, 
    ORDERLINENUMBER int, 
    SALES float, 
    STATUS string, 
    QTR_ID int, 
    MONTH_ID int, 
    YEAR_ID int, 
    PRODUCTLINE string, 
    MSRP int, 
    PRODUCTCODE string, 
    PHONE string, 
    CITY string, 
    STATE string, 
    POSTALCODE string, 
    COUNTRY string, 
    TERRITORY string, 
    CONTACTLASTNAME string, 
    CONTACTFIRSTNAME string, 
    DEALSIZE string 
    ) 
    row format delimited
    fields terminated by ',' 
    tblproperties("skip.header.line.count"="1") ;
  
4. Load data from hdfs path into "sales_order_csv" 

  load data local inpath '/rahul/sales_order_data.csv' into table sales_order_csv;

5. Create an internal hive table which will store data in ORC format "sales_order_orc"
  
  
  CREATE TABLE sales_order_csv 
  ( 
    ORDERNUMBER int, 
    QUANTITYORDERED int, 
    PRICEEACH float, 
    ORDERLINENUMBER int, 
    SALES float, 
    STATUS string, 
    QTR_ID int, 
    MONTH_ID int, 
    YEAR_ID int, 
    PRODUCTLINE string, 
    MSRP int, 
    PRODUCTCODE string, 
    PHONE string, 
    CITY string, 
    STATE string, 
    POSTALCODE string, 
    COUNTRY string, 
    TERRITORY string, 
    CONTACTLASTNAME string, 
    CONTACTFIRSTNAME string, 
    DEALSIZE string 
    ) 
    STORED AS orc;

6. Load data from "sales_order_csv" into "sales_order_orc"

  from sales_order_csv insert overwrite table sales_order_orc select *;
  set hive.cli.print.header = true;

Perform below menioned queries on "sales_order_orc" table :

a. Calculatye total sales per year

Ans: SELECT year_id as YEAR, SUM(sales) as SALES_PER_YEAR from sales_order_orc GROUP BY year_id;

b. Find a product for which maximum orders were placed

Ans: SELECT SUM(QUANTITYORDERED) as TOTAL_QUANTITY, PRODUCTLINE as MAX_ORDER_PRODUCT from sales_order_orc GROUP BY PRODUCTLINE ORDER BY TOTAL_QUANTITY DESC LIMIT 1; 

c. Calculate the total sales for each quarter

Ans: SELECT SUM(sales) as TOTAL_SALES, QTR_ID as QUARTER from sales_order_orc GROUP BY QTR_ID;

d. In which quarter sales was minimum

Ans: SELECT SUM(sales) as TOTAL_SALES, QTR_ID as QUARTER from sales_order_orc GROUP BY QTR_ID ORDER BY TOTAL_SALES LIMIT 1;

e. In which country sales was maximum and in which country sales was minimum

Ans: SELECT SUM(sales) as TOTAL_SALES, QTR_ID as QUARTER from sales_order_orc GROUP BY QTR_ID ORDER BY TOTAL_SALES LIMIT 1 
     UNION ALL SELECT SUM(sales) as TOTAL_SALES, QTR_ID as QUARTER from sales_order_orc GROUP BY QTR_ID ORDER BY TOTAL_SALES DESC LIMIT 1;

f. Calculate quartelry sales for each city

Ans: select city,quarter,sum(sales) as total_sales 
     from ( select city, case when QTR_ID = 1  then "Q1" when QTR_ID = 2 then 'Q2' when QTR_ID = 3 then 'Q3' else 'Q4' end as quarter, sales from sales_order_orc ) t1 
     group by city,quarter order by city,quarter;

h. Find a month for each year in which maximum number of quantities were sold

Ans: select year_id, month_id, total_sales
     from ( select year_id, month_id, total_sales,dense_rank() over (partition by year_id order by total_sales desc) as ranks 
     from ( select YEAR_ID, month_id, sum(sales) as total_sales from sales_order_orc group by YEAR_ID, month_id ) tbl1 ) tbl2 where ranks = 1;

