Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
The CountryCode for America is USA.

Ans: Select * From city where countrycode = 'USA' and population > 100000.

Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
The CountryCode for America is USA.

Ans: Select Name from city where countrycode = 'USA' and population > 120000.

Q3. Query all columns (attributes) for every row in the CITY table

Ans: Select * from city;

Q4. Query all columns for a city in CITY with the ID 1661.

Ans: Select * from city where ID = 1661;

Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is
JPN.

Ans: Select * from city where countrycode = 'JPN';

Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is
JPN.

Ans: Select name from city where countrycode = 'JPN';

Q7. Query a list of CITY and STATE from the STATION table.

Ans: Select city,state from station;

Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.

Ans: Select distinct city from station where id % 2 == 0;

Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.

Ans: SELECT (count(CITY) - count(DISTINCT CITY)) as DIFFERENCE
FROM STATION;

Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically.

Ans: SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) ASC, CITY ASC LIMIT 1; 
     SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY ASC LIMIT 1;

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
cannot contain duplicates.


Ans: SELECT DISTINCT CITY FROM STATION where  CITY Regexp '^[aeiou].*$'

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
contain duplicates

Ans: SELECT DISTINCT CITY FROM STATION WHERE CITY  Regexp '^.*[aeiou]$';

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
contain duplicates.

Ans: SELECT DISTINCT CITY FROM STATION where not CITY Regexp '^[aeiou].*$'

Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
contain duplicates.

Ans: SELECT DISTINCT CITY FROM STATION WHERE NOT CITY  Regexp '^.*[aeiou]$';

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.

Ans: SELECT DISTINCT CITY FROM STATION where not CITY Regexp '^[aeiou].*$' or not CITY  Regexp '^.*[aeiou]$';

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates


Ans: SELECT DISTINCT CITY FROM STATION where not CITY Regexp '^[aeiou].*$' and not CITY  Regexp '^.*[aeiou]$';

Q17.Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.
Return the result table in any orde

Ans: SELECT p.product_id, p.product_name 
     FROM product as p inner join sales as s 
     ON p.product_id = s.product_id
     WHERE product_id NOT IN (SELECT product_id  FROM Sales WHERE sale_date > '2019-03-31') 
     GROUP BY p.product_id;
     
Q18.Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order

Ans: SELECT DISTINCT author_id from views where author_id = viewer_id ORDER BY author_id ASC;

Q19.Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal
places.

Ans: SELECT ROUND(COUNT(select * from delivery where order_date = customer_pref_delivery_date)*100/COUNT(order_date),2) immediate_percentage  FROM delivery;

Q20.Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
Return the result table ordered by ctr in descending order and by ad_id in ascending order in case of a
tie

Ans: SELECT DISTINCT ad_id, 
     ROUND
     ( 100 * COALESCE(
      SUM(action = 'Clicked') OVER (PARTITION BY ad_id) / 
      SUM(action IN ('Clicked', 'Viewed')) OVER (PARTITION BY ad_id)
      , 0),2) ctr FROM ads;
 
Q21.Write an SQL query to find the team size of each of the employees.
Return result table in any order

Ans: SELECT e.employee_id, r.team_size
     FROM qmployee as e INNER JOIN (SELECT team_id,COUNT(*) as team_size FROM employee GROUP BY team_id ) as r
     ON e.team_id = r.team_id;

Q22.Write an SQL query to find the type of weather in each country for November 2019.
The type of weather is:
● Cold if the average weather_state is less than or equal 15,
● Hot if the average weather_state is greater than or equal to 25, and
● Warm otherwise

Ans: SELECT c.country_name,
     (
     CASE w.weather_state
     (
       WHEN SUM(w.weather_state/COUNT(w.day)) <= 15 THEN 'Cold'
       WHEN SUM(w.weather_state/COUNT(w.day)) >= 25 THEN 'Hot'
       ELSE 'Warm'
       END
     )
     ) as w.weather_type
     FROM country as c INNER JOIN weather as w
     ON c.country_id = w.country_id
     WHERE w.day between '2019-11-01' and '2019-11-30'
     GROUP BY country_name;
     
Q23.Write an SQL query to find the average selling price for each product. average_price should be
rounded to 2 decimal places.
Return the result table in any order

Ans: select p.product_id, 
    round(sum(p.price * u.units)/sum(u.units), 2) as average_price
from Prices p
left join UnitsSold u
on p.product_id = u.product_id and 
    datediff(u.purchase_date, p.start_date) >= 0 and
    datediff(p.end_date, u.purchase_date) >= 0
group by p.product_id


Q24.Write an SQL query to report the first login date for each playe

Ans: SELECT player_id, MIN(event_date) OVER (partition by player_id ORDER BY event_date) as first_login
     FROM activity GROUP BY player_id;
     
Q25.Write an SQL query to report the device that is first logged in for each playe.

Ans:
SELECT
	player_id,
	device_id
FROM (
	 SELECT 
	 	player_id,
	 	device_id,
	 	event_date,
	 	MIN(event_date) OVER(PARTITION BY player_id ORDER BY event_date) as first_login
	 FROM Activity
 	) t1
 WHERE event_date = first_login
     
 Q26.Write an SQL query to get the names of products that have at least 100 units ordered in February 2020
and their amount.
Return result table in any order.

Ans: SELECT p.product_name, SUM(o.units) as unit FROM products as p INNER JOIN orders as o 
     ON  p.product_id = o.product_id 
     WHERE DATE_FORMAT(0.order_date, '%Y-%m') = '2020-02'
     GROUP BY p.product_name
     HAVING SUM(units) >=100;
     
 Q27.Write an SQL query to find the users who have valid emails.
A valid e-mail has a prefix name and a domain where:
● The prefix name is a string that may contain letters (upper or lower case), digits, underscore
'_', period '.', and/or dash '-'. The prefix name must start with a letter.
● The domain is '@leetcode.com'.

Ans: select *  from Users
     where  mail regexp '^[A-Za-z][A-Za-z0-9\_\.\-]*@leetcode\.com$';
     
 Q28.Write an SQL query to report the customer_id and customer_name of customers who have spent at
least $100 in each month of June and July 2020.

Ans: select customer_id, name
from
(
    select o.customer_id, c.name,
        sum(case when left(o.order_date,7) = '2020-06' then p.price * o.quantity end) as JuneSpend,
        sum(case when left(o.order_date,7) = '2020-07' then p.price * o.quantity end) as JulySpend
    from Orders o
    left join Customers c on o.customer_id = c.customer_id
    left join Product p on o.product_id = p.product_id
    group by o.customer_id
    having JuneSpend >= 100 and JulySpend >= 100
) as temp;

Q29.Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.

Ans: SELECT DISTINCT title
FROM TVProgram LEFT JOIN Content USING (content_id)
WHERE 
    program_date BETWEEN "2020-06-01" AND "2020-06-30"
    AND Kids_content = "Y" 
    AND content_type = "Movies";
    
 Q30. Write an SQL query to find the npv of each query of the Queries table
 
 Ans: SELECT 
    id, 
    year, 
    IFNULL(npv, 0) AS npv
FROM 
    Queries
    LEFT JOIN NPV USING (id, year);
    
Q31. Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just
show null.

Ans:SELECT
    unique_id,
    name
FROM (
SELECT
    e.id, 
    e.name,
    eu.unique_id
FROM EMployees as e LEFT JOIN EmployeeUNI as eu
ON e.id = eu.id
    ) x;
    
 Q32.Write an SQL query to report the distance travelled by each user.
Return the result table ordered by travelled_distance in descending order, if two or more users
travelled the same distance, order them by their name in ascending order

Ans: SELECT
    u.name,
    IFNULL(SUM(distance),0) as travelled_distance
FROM Users as u LEFT JOIN Rides as r
ON r.user_id = u.id
GROUP BY 1
ORDER BY 2 DESC, 1;

Q33. Write an SQL query to get the names of products that have at least 100 units ordered in February 2020
and their amount.

Ans: SELECT
    t2.product_name,
    t1.unit
FROM (
SELECT
    product_id,
    SUM(unit) as unit
FROM Orders
WHERE DATE_FORMAT(order_date, '%Y-%m') = '2020-02'
GROUP BY 1
HAVING SUM(unit) >= 100
    ) as t1 JOIN Products as t2
ON t1.product_id = t2.product_id;



